<?php

namespace Sphp\Core\Types;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-12 at 02:27:55.
 */
class StringsTest extends \PHPUnit_Framework_TestCase {

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    //$this->object = new String("string");
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  /**
   * 
   * @return array
   */
  public function emptyStrings() {
    return [["", null, false]];
  }

  /**
   * @covers Sphp\Tools\String::isEmpty
   * @dataProvider emptyStrings
   */
  public function testEmpty($empty) {
    $this->assertTrue(Strings::isEmpty($empty));
    $this->assertFalse(Strings::notEmpty($empty));
    $this->assertEquals(Strings::length($empty), 0);
  }

  /**
   * 
   * @return array
   */
  public function nonEmptyStrings() {
    return [[" ", "\t", true, "\n", "0", 0]];
  }

  /**
   * @covers Sphp\Tools\String::isEmpty
   * @dataProvider nonEmptyStrings
   */
  public function testNonEmpty($nonEmpty) {
    $this->assertFalse(Strings::isEmpty($nonEmpty));
    $this->assertTrue(Strings::notEmpty($nonEmpty));
    $this->assertFalse(Strings::length($nonEmpty) == 0);
  }
  
  
  /**
   * 
   * @return array
   */
  public function startsWith() {
    return [
        [false, ""],
        [true, "1"],
        [true, 1],
        [null, ""],
        ["\n", "\n"],
        ["\t", "\t"],
        [0, "0"],
        ["0", 0],
        ["0", "0"],
        [0, 0],
        ["abc", "a"],
        ["abc", "ab"],
        ["abc", "abc"],
        ["åäö", "å"],
        ["åäö", "åä"],
        ["åäö", "åäö"]
        ];
  }

  /**
   * @covers Sphp\Tools\String::startsWith
   * @dataProvider startsWith
   */
  public function testStartsWith($haystack, $needle) {
    $this->assertTrue(Strings::startsWith($haystack, $needle));
  }

  /**
   * 
   * @return array
   */
  public function endsWith() {
    return [
        [false, ""],
        [true, "1"],
        [null, ""],
        ["", ""],
        ["\n", "\n"],
        ["\t", "\t"],
        ["\n\t", "\n\t"],
        [0, "0"],
        ["0", "0"],
        ["abc", "c"],
        ["abc", "bc"],
        ["abc", "abc"],
        ["abc", ""],
        ["åäö", "ö"],
        ["åäö", "äö"],
        ["åäö", "åäö"]
        ];
  }
  /**
   * @covers Sphp\Tools\String::startsWith
   * @dataProvider endsWith
   */
  public function testEndsWith($haystack, $needle) {
    $this->assertTrue(Strings::endsWith($haystack, $needle));
  }

  /**
   * 
   * @return array
   */
  public function endsNotWith() {
    return [
        [false, false],
        [true, true],
        [null, null],
        ["", null],
        ["", " "],
        ["\n", "\t"],
        ["\t", "\n"],
        ["\n\t", "\t\n"],
        [0, 0],
        ["0", 0],
        ["abc", "abC"],
        ["abc", "b"],
        ["abc", "a"],
        ["åäö", "ä"],
        ["åäö", "å"],
        ["åäö", "Ö"]
        ];
  }
  /**
   * @covers Sphp\Tools\String::startsWith
   * @dataProvider endsNotWith
   */
  public function testNotEndsWith($haystack, $needle) {
    $this->assertFalse(Strings::endsWith($haystack, $needle));
  }

}
