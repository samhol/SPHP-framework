<?php

namespace Sphp\Core\Types;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-12 at 02:27:55.
 */
class StringsTest extends \PHPUnit_Framework_TestCase {

  /**
   * 
   * @return array
   */
  public function emptyStrings() {
    return [["", null, false]];
  }

  /**
   * @covers Sphp\Core\Types\Strings::isEmpty
   * @dataProvider emptyStrings
   */
  public function testEmpty($empty) {
    $this->assertTrue(Strings::isEmpty($empty));
    $this->assertFalse(Strings::notEmpty($empty));
    $this->assertEquals(Strings::length($empty), 0);
  }

  /**
   * 
   * @return array
   */
  public function nonEmptyStrings() {
    return [[" ", "\t", true, "\n", "0", 0]];
  }

  /**
   * @covers Sphp\Core\Types\Strings::isEmpty
   * @dataProvider nonEmptyStrings
   */
  public function testNonEmpty($nonEmpty) {
    $this->assertFalse(Strings::isEmpty($nonEmpty));
    $this->assertTrue(Strings::notEmpty($nonEmpty));
    $this->assertFalse(Strings::length($nonEmpty) == 0);
  }

  /**
   * 
   * @return array
   */
  public function startsWith() {
    return [
        [false, ""],
        [true, "1"],
        [true, 1],
        [null, ""],
        ["\n", "\n"],
        ["\t", "\t"],
        [0, "0"],
        ["0", 0],
        ["0", "0"],
        [0, 0],
        ["abc", "a"],
        ["abc", "ab"],
        ["abc", "abc"],
        ["åäö", "å"],
        ["åäö", "åä"],
        ["åäö", "åäö"]
    ];
  }

  /**
   * @covers Sphp\Core\Types\Strings::startsWith
   * @dataProvider startsWith
   */
  public function testStartsWith($haystack, $needle) {
    $this->assertTrue(Strings::startsWith($haystack, $needle));
  }

  /**
   * 
   * @return array
   */
  public function endsWith() {
    return [
        [false, ""],
        [true, "1"],
        [null, ""],
        ["", ""],
        ["\n", "\n"],
        ["\t", "\t"],
        ["\n\t", "\n\t"],
        [0, "0"],
        ["0", "0"],
        ["abc", "c"],
        ["abc", "bc"],
        ["abc", "abc"],
        ["abc", ""],
        ["åäö", "ö"],
        ["åäö", "äö"],
        ["åäö", "åäö"]
    ];
  }

  /**
   * @covers Sphp\Core\Types\Strings::startsWith
   * @dataProvider endsWith
   */
  public function testEndsWith($haystack, $needle) {
    $this->assertTrue(Strings::endsWith($haystack, $needle));
  }

  /**
   * 
   * @return array
   */
  public function endsNotWith() {
    return [
        [false, false],
        [true, true],
        [null, null],
        ["", null],
        ["", " "],
        ["\n", "\t"],
        ["\t", "\n"],
        ["\n\t", "\t\n"],
        [0, 0],
        ["0", 0],
        ["abc", "abC"],
        ["abc", "b"],
        ["abc", "a"],
        ["åäö", "ä"],
        ["åäö", "å"],
        ["åäö", "Ö"]
    ];
  }

  /**
   * @covers Sphp\Core\Types\Strings::startsWith
   * @dataProvider endsNotWith
   */
  public function testNotEndsWith($haystack, $needle) {
    $this->assertFalse(Strings::endsWith($haystack, $needle));
  }

  /**
   * 
   * @return array
   */
  public function ordinalizeData() {
    $nums = range(4, 20);
    foreach ($nums as $num) {
      echo "$num\n";
      $arr[] = [$num, $num . "th"];
      $arr[] = ["$num", $num . "th"];
    }
    $arr[] = ["-2", "-2nd"];
    $arr[] = [1, "1st"];
    $arr[] = ["1", "1st"];
    $arr[] = [2, "2nd"];
    $arr[] = ["2", "2nd"];
    $arr[] = ["3", "3rd"];
    return $arr;
  }

  /**
   * @covers Sphp\Core\Types\Strings::startsWith
   * @dataProvider ordinalizeData
   * @param string $string
   * @param string $expected
   */
  public function testOrdinalize($string, $expected) {
    $this->assertEquals(Strings::ordinalize($string), $expected);
  }

  /**
   * 
   * @return array
   */
  public function trimData() {
    return [
        ["", null, ""],
        [" ", null, ""],
        ["  ", " ", ""],
        ["   ", null, ""],
        [" a aa a ", null, "a aa a"],
        [" a abba a ", " a", "bb"],
        ["\n\tstring\t\n", "\n", "\tstring\t"],
        [121, 1, 2],
    ];
  }

  /**
   * @covers Sphp\Core\Types\Strings::trim
   * @dataProvider trimData
   * @param string $string
   * @param string $charsToTrim
   */
  public function testTrim($string, $charsToTrim, $expected) {
    $this->assertEquals(Strings::trim($string, $charsToTrim), $expected);
  }

  /**
   * 
   * @return array
   */
  public function trimLeftData() {
    return [
        ["", null, ""],
        [" ", null, ""],
        ["  ", " ", ""],
        ["   ", null, ""],
        [" a aa a ", null, "a aa a "],
        [" a abba a ", " a", "bba a "],
        ["\n\tstring\t\n", "\n", "\tstring\t\n"],
        [121, 1, 21],
    ];
  }

  /**
   * @covers Sphp\Core\Types\Strings::trimLeft
   * @dataProvider trimLeftData
   * @param string $string
   * @param string $charsToTrim
   */
  public function testLeftTrim($string, $charsToTrim, $expected) {
    $this->assertEquals(Strings::trimLeft($string, $charsToTrim), $expected);
  }

  /**
   * 
   * @return array
   */
  public function trimRightData() {
    return [
        ["", null, ""],
        [" ", null, ""],
        ["  ", " ", ""],
        ["   ", null, ""],
        [" a aa a ", null, " a aa a"],
        [" a abba a ", "a ", " a abb"],
        ["\n\tstring\t\n", "\n", "\n\tstring\t"],
        [121, 1, 12],
    ];
  }

  /**
   * @covers Sphp\Core\Types\Strings::trimRight
   * @dataProvider trimRightData
   * @param string $string
   * @param string $charsToTrim
   */
  public function testRightTrim($string, $charsToTrim, $expected) {
    $this->assertEquals(Strings::trimRight($string, $charsToTrim), $expected);
  }

}
