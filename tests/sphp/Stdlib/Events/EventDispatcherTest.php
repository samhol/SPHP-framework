<?php

namespace Sphp\Stdlib\Events;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-12 at 02:27:55.
 */
class EventDispatcherTest extends \PHPUnit\Framework\TestCase implements EventListenerInterface {

	/**
	 * @var EventDispatcher
	 */
	protected $events;

	/**
	 * @var \Closure
	 */
	protected $mirror;

	/**
	 *
	 * @var Event
	 */
	protected $event_a;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->events = new EventDispatcher();
		$this->mirror = function ($event) {
			return $event;
		};
		$this->event_a = new Event("a", $this, ["data1", "data2"]);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

  public function testA () {
    $this->events->addListener("evt", function($evt) {
      echo "$evt\n";
    });
		$this->assertTrue($this->events->hasListeners("evt"));
		$this->assertTrue($this->events->hasListeners("evt"));
  }


  /**
	 */
	public function test1() {
		$this->assertFalse($this->events->hasListeners("e1"));
		$this->events->addListener("a", $this->mirror);
		$this->assertTrue($this->events->hasListeners("a"));
		$this->assertFalse($this->events->hasListeners("b"));
		$this->events->addListener(["a", "b"], $this);
		$this->assertTrue($this->events->hasListeners("a"));
		$this->assertTrue($this->events->hasListeners("b"));
		$this->events->trigger($this->event_a);
	}

	public function on(EventInterface $event) {
		$this->assertFalse($event->isStopped());
	}

}
